// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'src/src.gen.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 8459453204103938208),
    name: 'CachedInfo',
    lastPropertyId: const obx_int.IdUid(5, 3365747513045855685),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8028247047381883295),
        name: 'databaseId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8896842117900571857),
        name: 'id',
        type: 9,
        flags: 34848,
        indexId: const obx_int.IdUid(3, 9096189874747098881),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6158912721918172856),
        name: 'firstName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1810095650647611062),
        name: 'lastName',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(4, 6352506941633648800),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3365747513045855685),
        name: 'infosId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(5, 6892460817020601503),
        relationTarget: 'CachedUserWithInfos',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 39276216087452077),
    name: 'CachedUser',
    lastPropertyId: const obx_int.IdUid(4, 7620955687950038010),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6669143255773319163),
        name: 'databaseId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 614013972176622405),
        name: 'infoId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 3411161716175237230),
        relationTarget: 'CachedInfo',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4501392048368899143),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7620955687950038010),
        name: 'id',
        type: 9,
        flags: 34848,
        indexId: const obx_int.IdUid(2, 1709280702147505266),
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 2059471628198860541),
    name: 'CachedUserWithInfos',
    lastPropertyId: const obx_int.IdUid(3, 7333209099221140108),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5009925545104132606),
        name: 'databaseId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6269197343057754244),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7333209099221140108),
        name: 'id',
        type: 9,
        flags: 34848,
        indexId: const obx_int.IdUid(6, 2114284312053011918),
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'infos',
        srcEntity: 'CachedInfo',
        srcField: 'infos',
      ),
    ],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) {
  return obx.Store(
    getObjectBoxModel(),
    directory: directory,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 2059471628198860541),
    lastIndexId: const obx_int.IdUid(6, 2114284312053011918),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    CachedInfo: obx_int.EntityDefinition<CachedInfo>(
      model: _entities[0],
      toOneRelations: (CachedInfo object) => [object.infos],
      toManyRelations: (CachedInfo object) => {},
      getId: (CachedInfo object) => object.databaseId,
      setId: (CachedInfo object, int id) {
        object.databaseId = id;
      },
      objectToFB: (CachedInfo object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final firstNameOffset = object.firstName == null
            ? null
            : fbb.writeString(object.firstName!);
        final lastNameOffset = fbb.writeString(object.lastName);
        fbb.startTable(6);
        fbb.addInt64(0, object.databaseId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, firstNameOffset);
        fbb.addOffset(3, lastNameOffset);
        fbb.addInt64(4, object.infos.targetId);
        fbb.finish(fbb.endTable());
        return object.databaseId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final firstNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final lastNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object =
            CachedInfo(
                id: idParam,
                firstName: firstNameParam,
                lastName: lastNameParam,
              )
              ..databaseId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                4,
                0,
              );
        object.infos.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.infos.attach(store);
        return object;
      },
    ),
    CachedUser: obx_int.EntityDefinition<CachedUser>(
      model: _entities[1],
      toOneRelations: (CachedUser object) => [object.info],
      toManyRelations: (CachedUser object) => {},
      getId: (CachedUser object) => object.databaseId,
      setId: (CachedUser object, int id) {
        object.databaseId = id;
      },
      objectToFB: (CachedUser object, fb.Builder fbb) {
        final nameOffset = object.name == null
            ? null
            : fbb.writeString(object.name!);
        final idOffset = fbb.writeString(object.id);
        fbb.startTable(5);
        fbb.addInt64(0, object.databaseId);
        fbb.addInt64(1, object.info.targetId);
        fbb.addOffset(2, nameOffset);
        fbb.addOffset(3, idOffset);
        fbb.finish(fbb.endTable());
        return object.databaseId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = CachedUser(name: nameParam, id: idParam)
          ..databaseId = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            4,
            0,
          );
        object.info.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        object.info.attach(store);
        return object;
      },
    ),
    CachedUserWithInfos: obx_int.EntityDefinition<CachedUserWithInfos>(
      model: _entities[2],
      toOneRelations: (CachedUserWithInfos object) => [],
      toManyRelations: (CachedUserWithInfos object) => {
        obx_int.RelInfo<CachedInfo>.toOneBacklink(
          5,
          object.databaseId,
          (CachedInfo srcObject) => srcObject.infos,
        ): object.infos,
      },
      getId: (CachedUserWithInfos object) => object.databaseId,
      setId: (CachedUserWithInfos object, int id) {
        object.databaseId = id;
      },
      objectToFB: (CachedUserWithInfos object, fb.Builder fbb) {
        final nameOffset = object.name == null
            ? null
            : fbb.writeString(object.name!);
        final idOffset = fbb.writeString(object.id);
        fbb.startTable(4);
        fbb.addInt64(0, object.databaseId);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, idOffset);
        fbb.finish(fbb.endTable());
        return object.databaseId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = CachedUserWithInfos(name: nameParam, id: idParam)
          ..databaseId = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            4,
            0,
          );
        obx_int.InternalToManyAccess.setRelInfo<CachedUserWithInfos>(
          object.infos,
          store,
          obx_int.RelInfo<CachedInfo>.toOneBacklink(
            5,
            object.databaseId,
            (CachedInfo srcObject) => srcObject.infos,
          ),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CachedInfo] entity fields to define ObjectBox queries.
class CachedInfo_ {
  /// See [CachedInfo.databaseId].
  static final databaseId = obx.QueryIntegerProperty<CachedInfo>(
    _entities[0].properties[0],
  );

  /// See [CachedInfo.id].
  static final id = obx.QueryStringProperty<CachedInfo>(
    _entities[0].properties[1],
  );

  /// See [CachedInfo.firstName].
  static final firstName = obx.QueryStringProperty<CachedInfo>(
    _entities[0].properties[2],
  );

  /// See [CachedInfo.lastName].
  static final lastName = obx.QueryStringProperty<CachedInfo>(
    _entities[0].properties[3],
  );

  /// See [CachedInfo.infos].
  static final infos = obx.QueryRelationToOne<CachedInfo, CachedUserWithInfos>(
    _entities[0].properties[4],
  );
}

/// [CachedUser] entity fields to define ObjectBox queries.
class CachedUser_ {
  /// See [CachedUser.databaseId].
  static final databaseId = obx.QueryIntegerProperty<CachedUser>(
    _entities[1].properties[0],
  );

  /// See [CachedUser.info].
  static final info = obx.QueryRelationToOne<CachedUser, CachedInfo>(
    _entities[1].properties[1],
  );

  /// See [CachedUser.name].
  static final name = obx.QueryStringProperty<CachedUser>(
    _entities[1].properties[2],
  );

  /// See [CachedUser.id].
  static final id = obx.QueryStringProperty<CachedUser>(
    _entities[1].properties[3],
  );
}

/// [CachedUserWithInfos] entity fields to define ObjectBox queries.
class CachedUserWithInfos_ {
  /// See [CachedUserWithInfos.databaseId].
  static final databaseId = obx.QueryIntegerProperty<CachedUserWithInfos>(
    _entities[2].properties[0],
  );

  /// See [CachedUserWithInfos.name].
  static final name = obx.QueryStringProperty<CachedUserWithInfos>(
    _entities[2].properties[1],
  );

  /// See [CachedUserWithInfos.id].
  static final id = obx.QueryStringProperty<CachedUserWithInfos>(
    _entities[2].properties[2],
  );

  /// see [CachedUserWithInfos.infos]
  static final infos = obx.QueryBacklinkToMany<CachedInfo, CachedUserWithInfos>(
    CachedInfo_.infos,
  );
}
