// AUTOGENERATED - DO NOT MODIFY MANUALLY

import 'package:cached/cached.dart';
import 'src.dart';

@Entity()
class CachedInfo implements CachedGeneratedModel<Info> {
  CachedInfo({
    this.firstName,
    required this.lastName,
    required this.id,
    this.databaseId = 0,
  });

  factory CachedInfo.fromModel(Info model) {
    return CachedInfo(
      firstName: model.firstName,
      lastName: model.lastName,
      id: model.id,
      databaseId: model.databaseId,
    );
  }

  String? firstName;

  @Index()
  String lastName;

  @Unique(onConflict: ConflictStrategy.replace)
  @override
  String id;

  @Id()
  @override
  int databaseId;

  final userWithInfos = ToOne<CachedUserWithInfos>();

  @override
  Info toModel() {
    return Info(
      firstName: firstName,
      lastName: lastName,
      id: id,
      databaseId: databaseId,
    );
  }

  @override
  void remove(Store store) {
    // if databaseId is 0 the model
    // has not been saved to the database yet
    if (databaseId == 0) {
      return;
    }

    // remove this
    store.box<CachedInfo>().remove(databaseId);
  }

  @override
  void removeAll(Store store) {
    // remove this
    store.box<CachedInfo>().removeAll();
  }
}

@Entity()
class CachedUser implements CachedGeneratedModel<User> {
  CachedUser({this.name, required this.id, this.databaseId = 0});

  factory CachedUser.fromModel(User model) {
    final cached = CachedUser(
      name: model.name,
      id: model.id,
      databaseId: model.databaseId,
    );

    return cached;
  }

  var info = ToOne<CachedInfo>();

  String? name;

  @Unique(onConflict: ConflictStrategy.replace)
  @override
  String id;

  @Id()
  @override
  int databaseId;

  @override
  User toModel() {
    return User(
      name: name,
      id: id,
      databaseId: databaseId,
      info: info.target?.toModel(),
    );
  }

  @override
  void remove(Store store) {
    // if databaseId is 0 the model
    // has not been saved to the database yet
    if (databaseId == 0) {
      return;
    }

    final entry = store.box<CachedUser>().get(databaseId);

    // remove info
    if (entry?.info.targetId != null) {
      store.box<CachedInfo>().remove(entry!.info.targetId);
    }

    // remove this
    store.box<CachedUser>().remove(databaseId);
  }

  @override
  void removeAll(Store store) {
    // remove all infos
    store.box<CachedInfo>().removeAll();

    // remove this
    store.box<CachedUser>().removeAll();
  }
}

@Entity()
class CachedUserWithInfos implements CachedGeneratedModel<UserWithInfos> {
  CachedUserWithInfos({required this.id, this.databaseId = 0, this.name});

  factory CachedUserWithInfos.fromModel(UserWithInfos model) {
    final cached = CachedUserWithInfos(
      id: model.id,
      databaseId: model.databaseId,
      name: model.name,
    );

    for (final el in model.infos) {
      final embeddedElement = CachedInfo.fromModel(el);
      cached.infos.add(embeddedElement);
    }

    return cached;
  }

  @Unique(onConflict: ConflictStrategy.replace)
  @override
  String id;

  @Id()
  @override
  int databaseId;

  @Backlink('userWithInfos')
  var infos = ToMany<CachedInfo>();

  String? name;

  @override
  UserWithInfos toModel() {
    return UserWithInfos(
      id: id,
      databaseId: databaseId,
      name: name,
      infos: infos.map((e) => e.toModel()).toList(),
    );
  }

  @override
  void remove(Store store) {
    // if databaseId is 0 the model
    // has not been saved to the database yet
    if (databaseId == 0) {
      return;
    }

    // remove infos
    for (final el in infos) {
      el.remove(store);
    }

    // remove this
    store.box<CachedUserWithInfos>().remove(databaseId);
  }

  @override
  void removeAll(Store store) {
    // remove infoss
    store.box<CachedInfo>().removeAll();

    // remove this
    store.box<CachedUserWithInfos>().removeAll();
  }
}
